{
  "name": "Youtube Note Taker copy",
  "nodes": [
    {
      "parameters": {
        "resource": "playlist",
        "operation": "get",
        "playlistId": "={{ $json.playlistId }}",
        "part": [
          "snippet",
          "status"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        -880,
        256
      ],
      "id": "4071db70-9998-4e0f-ac1c-7fd0bb53c280",
      "name": "Get a playlist",
      "retryOnFail": true
    },
    {
      "parameters": {
        "resource": "playlistItem",
        "operation": "getAll",
        "playlistId": "={{ $json.id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        48,
        592
      ],
      "id": "94f21eca-76da-4f74-96dd-800dd839323e",
      "name": "Get all Videos",
      "retryOnFail": true,
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "50MlfAbFJpmDnPjd",
          "name": "YouTube account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "playlist",
          "mode": "list",
          "cachedResultName": "playlist"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "completed": false,
            "id": "={{ $('Get a playlist').item.json.id }}",
            "title": "={{ $('Get a playlist').item.json.snippet.title }}",
            "created_at": "={{ $now.toUTC() }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "completed",
              "displayName": "completed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -112,
        528
      ],
      "id": "d1028d89-ca41-4677-90b7-fa0af9854ab9",
      "name": "Insert rows in a table",
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "4RH6P1q4aqzunygA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "Transcript",
          "mode": "list",
          "cachedResultName": "Transcript"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tid": "={{ $json.snippet.resourceId.videoId }}",
            "name": "={{ $json.snippet.title }}",
            "pid": "={{ $('Get a playlist').item.json.id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "pid",
              "displayName": "pid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tid",
              "displayName": "tid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "transcript",
              "displayName": "transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        256,
        608
      ],
      "id": "8f0047a1-57f4-4008-866e-8fe09a72cc45",
      "name": "Insert rows in a table1",
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "4RH6P1q4aqzunygA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "29d5db26-6031-46eb-a3ae-6b0b82a44f00",
              "leftValue": "={{ $json.data_exists.toString() }}",
              "rightValue": "1",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -400,
        256
      ],
      "id": "67df4674-8c5e-4797-ab87-8b8f4a94d9bd",
      "name": "If Playlist exists"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        464,
        640
      ],
      "id": "c2896224-0215-47ab-add0-0dd923c06b3d",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/pintostudio~youtube-transcript-scraper/run-sync-get-dataset-items?token=apify_api_3CYJ20PJ3Qik1F76XPL45XcsQbdILc3tVHyA",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "language",
              "value": "en"
            },
            {
              "name": "videoUrl",
              "value": "=https://www.youtube.com/watch?v={{ $json.tid }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        752,
        704
      ],
      "id": "de71f998-3786-4847-807d-8975a9b575a8",
      "name": "HTTP Request",
      "retryOnFail": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Get all input items\nconst items = $input.all();\n\n// Safely get the data array\nconst data = items[0]?.json?.data || [];\n\n// If data is empty, return a fallback\nif (!Array.isArray(data) || data.length === 0) {\n  return [\n    {\n      json: {\n        \"pid\": $('Insert rows in a table1').first().json.pid,\n        \"tid\": $('Insert rows in a table1').first().json.tid,\n        transcript: \"\",\n        message: \"No transcript data found\"\n      }\n    }\n  ];\n}\n\n// Concatenate all \"text\" fields\nconst transcript = data.map(d => d.text).join(\" \");\n\n// Return final transcript\nreturn [\n  {\n    json: {\n      \"pid\": $('Insert rows in a table1').first().json.pid,\n      \"tid\": $('Insert rows in a table1').first().json.tid,\n      transcript\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        784
      ],
      "id": "a16d59ef-a36d-4928-8a06-335dc20b47de",
      "name": "Concatenate mini transcripts"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "2c112aef-9778-4bc1-a886-bd84a2d87afe",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1376,
        256
      ],
      "id": "d7d5735c-a65b-459b-ae99-60be84214266",
      "name": "Webhook",
      "webhookId": "2c112aef-9778-4bc1-a886-bd84a2d87afe"
    },
    {
      "parameters": {
        "jsCode": "const url = $input.first().json.body.playlistUrl;\n\n// Use regex to extract the playlist ID\nconst match = url.match(/list=([\\w-]+)/);\n\nreturn [\n  {\n    json: {\n      playlistId: match ? match[1] : null\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1136,
        256
      ],
      "id": "96891519-acd0-49c8-810b-e33d2226dfde",
      "name": "Code"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        768,
        -64
      ],
      "id": "d3050c47-a525-4b5d-b2ea-4be1766b61fa",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.transcript }}",
        "options": {
          "systemMessage": "You will receive YouTube transcripts on various topics. Your only task is to summarize these transcripts so that they don't lose their original meaning, and they should be properly formatted in Markdown language with appropriate headings, bolding, and underlining, and all the information must be included. No excuses for losing any information. You can also try adding your own content as well but they not to add too much."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1072,
        -112
      ],
      "id": "9b9d1ea1-bbb8-4e2a-a9b8-9bd61ae82d48",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        960,
        128
      ],
      "id": "3aa2a152-0463-4b4c-98b1-2980a4cfa7e6",
      "name": "DeepSeek Chat Model"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.pid }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1216,
        144
      ],
      "id": "73ac01ad-949a-4bd1-8372-bbcaae203ace",
      "name": "Postgres Chat Memory",
      "notesInFlow": true,
      "credentials": {
        "postgres": {
          "id": "4RH6P1q4aqzunygA",
          "name": "Postgres account"
        }
      },
      "notes": "Summarizing Transcripts"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e7ee03ac-13e3-4fca-a7bc-57c8fc56dc42",
              "name": "document_name",
              "value": "={{ $('Select from transcript').item.json.name }}",
              "type": "string"
            },
            {
              "id": "48a07ef2-ae46-4bfc-aa7e-d92a74ef46d6",
              "name": "html_content",
              "value": "={{ $json.data_in_html }}",
              "type": "string"
            },
            {
              "id": "22b02fba-ba72-423a-b92f-1191a183a554",
              "name": "drive_folder_id",
              "value": "1INP5DGUd1_6P6ZyEjXeMfx8V3RAyaZvn",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1632,
        48
      ],
      "id": "bd9ca17e-18ab-4ee1-8f70-417629b1ed06",
      "name": "set_fields",
      "notesInFlow": true
    },
    {
      "parameters": {
        "jsCode": "// Simple HTML to Google Drive converter with link preservation\nconst boundary = 'divider';\nconst docName = $input.first().json.document_name;\nconst folderId = $input.first().json.drive_folder_id;\nconst htmlContent = $input.first().json.html_content;\n\n// Process HTML to ensure links are preserved\nfunction preserveLinks(htmlContent) {\n    // Ensure all links have proper attributes for Google Drive\n    let processedHtml = htmlContent;\n    \n    // Fix any malformed or incomplete link tags\n    processedHtml = processedHtml.replace(/<a\\s+href=[\"']([^\"']+)[\"'][^>]*>(.*?)<\\/a>/gi, '<a href=\"$1\">$2</a>');\n    \n    // Ensure links have proper protocol\n    processedHtml = processedHtml.replace(/<a\\s+href=[\"'](?!https?:\\/\\/|mailto:|tel:)([^\"']+)[\"']>/gi, '<a href=\"https://$1\">');\n    \n    return processedHtml;\n}\n\nconst metadata = JSON.stringify({\n  name: docName,\n  mimeType: \"application/vnd.google-apps.document\",\n  parents: [folderId]\n});\n\n// Process the HTML content to preserve links\nconst processedHtmlContent = preserveLinks(htmlContent);\n\nconst htmlWithStyles = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <style>\n    /* Add bottom margin to block elements for spacing */\n    p,\n    ul,\n    ol,\n    table,\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      margin-bottom: 10pt;\n    }\n    h2 {\n      margin-top: 20pt;\n    }\n    /* Prevent margin collapse issues or excessive space inside lists */\n    li {\n       margin-bottom: 2pt; /* Optional: small space between list items */\n    }\n    /* Ensure links are styled properly for Google Drive */\n    a {\n      color: #1155cc;\n      text-decoration: underline;\n    }\n    /* Remove margin from the last child within common containers if needed */\n    /* This might be overly aggressive, test without it first */\n    /*\n    body > *:last-child,\n    li > *:last-child {\n       margin-bottom: 0;\n    }\n    */\n  </style>\n</head>\n<body>\n  ${processedHtmlContent}\n</body>\n</html>\n`;\n\n// Construct the body with literal \\r\\n ONLY\nlet body = `--${boundary}\\r\\n`;\nbody += `Content-Type: application/json; charset=UTF-8\\r\\n`;\nbody += `\\r\\n`; // Blank line\nbody += `${metadata}\\r\\n`;\nbody += `--${boundary}\\r\\n`;\nbody += `Content-Type: text/html\\r\\n`;\nbody += `\\r\\n`; // Blank line\nbody += `${htmlWithStyles}\\r\\n`; // Add the HTML content\nbody += `--${boundary}--\\r\\n`; // Final boundary\n\nreturn {\n  rawData: body \n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1904,
        112
      ],
      "id": "5e663f85-ab60-4365-9f86-ea2c9f06deca",
      "name": "Prepare_Request"
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $json.output }}",
        "destinationKey": "data_in_html",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        1408,
        -32
      ],
      "id": "e59ef6a9-48a3-4b49-8bbb-bdded8165c2c",
      "name": "Markdown1"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "*",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1INP5DGUd1_6P6ZyEjXeMfx8V3RAyaZvn",
            "mode": "list",
            "cachedResultName": "Youtube Playlists",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1INP5DGUd1_6P6ZyEjXeMfx8V3RAyaZvn"
          }
        },
        "options": {
          "fields": [
            "name",
            "id"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1008,
        -352
      ],
      "id": "106a7188-f613-47b6-891a-723cf7cbe7b0",
      "name": "Search files and folders",
      "executeOnce": true,
      "alwaysOutputData": true,
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {
          "includeBinaries": true
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1440,
        -352
      ],
      "id": "f0f9bec6-2029-4e64-9a33-3acd16d47438",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
              "sheetsToFormat": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1216,
        -352
      ],
      "id": "970ca3d5-0027-49da-8613-1d92bde2d5de",
      "name": "Download file",
      "retryOnFail": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "i1YdzgXMtz877jao",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "compress",
        "binaryPropertyName": "={{ Object.keys($binary).join(',') }}",
        "fileName": "={{ $('Get a playlist').item.json.snippet.localized.title }}.zip"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        1648,
        -352
      ],
      "id": "5c5beed5-d87b-4177-b76d-4c3fb3db55b5",
      "name": "Compression"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/upload/drive/v3/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "uploadType",
              "value": "multipart"
            },
            {
              "name": "supportsAllDrives",
              "value": "true"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "multipart/related; boundary=divider",
        "body": "={{ $json.rawData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2176,
        112
      ],
      "id": "4f0ba167-1965-4e5b-8538-b42d5c0a3279",
      "name": "CreateGoogleDoc",
      "notesInFlow": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "i1YdzgXMtz877jao",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $('Webhook').item.json.body.email }}",
        "subject": "YouTube Playlist",
        "message": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>File Download</title>\n</head>\n<body style=\"margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #f4f4f4; text-align: center;\">\n\n    <table role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"border-collapse: collapse;\">\n        <tr>\n            <td style=\"padding: 20px 0;\">\n                <table role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"border-collapse: collapse; margin: auto; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\">\n                    <tr>\n                        <td style=\"padding: 40px; text-align: center;\">\n\n                            <h1 style=\"color: #333333; font-size: 28px; margin: 0 0 20px;\">Your Files Are Ready</h1>\n\n                            <p style=\"color: #666666; font-size: 16px; line-height: 1.6; margin: 0 0 30px;\">\n                                Hello,\n                                <br><br>\n                                Your requested files have been processed and are now ready for download from the attachments.\n                            </p>\n\n                        </td>\n                    </tr>\n                </table>\n                <p style=\"font-size: 12px; color: #999999; margin-top: 20px; text-align: center;\">\n                    Thank you for using our service.\n                </p>\n            </td>\n        </tr>\n    </table>\n\n</body>\n</html>",
        "options": {
          "appendAttribution": false,
          "attachmentsUi": {
            "attachmentsBinary": [
              {}
            ]
          }
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1856,
        -352
      ],
      "id": "76f15c96-daa9-4596-9490-9a961980fecb",
      "name": "Send a message",
      "webhookId": "f7a0e00a-d855-47fa-9574-87d289a954ce",
      "credentials": {
        "gmailOAuth2": {
          "id": "PIO3aaMLk2ItecLA",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "* Clean and prepare the Html content.\n* Add styling, spacing and links etc.\n* Package it in a correct Googllee drive API marltipart formate.\n* Return the raw body, which the next http request node uses to actaully create a google Doc.",
        "height": 240,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1840,
        -128
      ],
      "typeVersion": 1,
      "id": "d9d23242-c7be-4d8e-be3c-4016920f38a6",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "",
        "width": 1136,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1408,
        240
      ],
      "typeVersion": 1,
      "id": "99cdd720-8d6e-4a6c-b51c-6dc3479d20dd",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "",
        "height": 432,
        "width": 1824,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        512,
        -128
      ],
      "typeVersion": 1,
      "id": "990709ee-9d9e-49d6-a05f-bc388e3170be",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "",
        "height": 544,
        "width": 1280
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -160,
        416
      ],
      "typeVersion": 1,
      "id": "d5c740b6-e346-42a7-8ab3-267165b52a72",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "deleteFile",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Search files and folders').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1408,
        -528
      ],
      "id": "40ce5c1d-b337-4d25-a54b-b519f909ddf0",
      "name": "Delete a file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "i1YdzgXMtz877jao",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1216,
        -528
      ],
      "id": "9dcfe1b6-72ec-4fb0-b066-331bdc1bca55",
      "name": "Wait",
      "webhookId": "d32bf385-5530-4fea-a406-1e9323e91319"
    },
    {
      "parameters": {
        "content": "",
        "height": 352,
        "width": 1168,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        928,
        -544
      ],
      "typeVersion": 1,
      "id": "3b0cece4-03ee-4c72-8289-2d75d655788a",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "playlist",
          "mode": "list",
          "cachedResultName": "playlist"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "completed": true,
            "id": "={{ $json.pid }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "completed",
              "displayName": "completed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        944,
        432
      ],
      "id": "263dec6a-d914-4dd4-bc61-586599234cbc",
      "name": "Update rows in a Playlists",
      "credentials": {
        "postgres": {
          "id": "4RH6P1q4aqzunygA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "Transcript",
          "mode": "list",
          "cachedResultName": "Transcript"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tid": "={{ $('Insert rows in a table1').item.json.tid }}",
            "pid": "={{ $('Insert rows in a table1').item.json.pid }}",
            "transcript": "={{ $json.transcript }}"
          },
          "matchingColumns": [
            "tid",
            "pid"
          ],
          "schema": [
            {
              "id": "pid",
              "displayName": "pid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tid",
              "displayName": "tid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transcript",
              "displayName": "transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        704,
        432
      ],
      "id": "db83cad3-f4d5-424c-bcda-53ba6b98523a",
      "name": "Update rows in a transcript",
      "credentials": {
        "postgres": {
          "id": "4RH6P1q4aqzunygA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "Transcript",
          "mode": "list",
          "cachedResultName": "Transcript"
        },
        "where": {
          "values": [
            {
              "column": "pid",
              "value": "={{ $('Get a playlist').item.json.id }}"
            },
            {
              "column": "transcript",
              "condition": "!=",
              "value": "NULL"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "updated_at"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        512,
        96
      ],
      "id": "55040f97-5455-49ec-bc9d-b5f1ec178a79",
      "name": "Select from transcript",
      "executeOnce": true,
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "4RH6P1q4aqzunygA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    CASE\n        WHEN EXISTS (SELECT 1 FROM playlist WHERE id = '{{ $json.id }}') THEN 1\n        ELSE 0\n    END AS data_exists;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -640,
        256
      ],
      "id": "9deab827-2d83-490b-b54a-b53e190c73b4",
      "name": "Playlist Exists",
      "retryOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    CASE\n        WHEN EXISTS (SELECT 1 FROM playlist WHERE id = '{{ $('Get a playlist').item.json.id }}' and completed = TRUE) THEN 1\n        ELSE 0\n    END AS playlist_complete;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -208,
        112
      ],
      "id": "54601163-f621-41ec-93ac-8161a82a11ac",
      "name": "Playlist Completed",
      "retryOnFail": true,
      "credentials": {
        "postgres": {
          "id": "4RH6P1q4aqzunygA",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "786a3397-72df-449b-9540-6e8c7a081498",
              "leftValue": "={{ $json.playlist_complete.toString() }}",
              "rightValue": "1",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -16,
        0
      ],
      "id": "ba8ae02a-4cb3-40a3-856c-9a09ee99ed7b",
      "name": "If"
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        192,
        96
      ],
      "id": "a0eff878-dd4f-4f7f-9b30-2aad6166e083",
      "name": "Wait1",
      "webhookId": "58ed29e8-5e43-47ba-9b06-d9c35c75631e"
    }
  ],
  "pinData": {},
  "connections": {
    "Get a playlist": {
      "main": [
        [
          {
            "node": "Playlist Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all Videos": {
      "main": [
        [
          {
            "node": "Insert rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "Get all Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Playlist exists": {
      "main": [
        [
          {
            "node": "Playlist Completed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Update rows in a transcript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Concatenate mini transcripts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Concatenate mini transcripts": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Get a playlist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Markdown1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "set_fields": {
      "main": [
        [
          {
            "node": "Prepare_Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare_Request": {
      "main": [
        [
          {
            "node": "CreateGoogleDoc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown1": {
      "main": [
        [
          {
            "node": "set_fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search files and folders": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Compression",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CreateGoogleDoc": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        []
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Delete a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a Playlists": {
      "main": [
        [
          {
            "node": "Select from transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a transcript": {
      "main": [
        [
          {
            "node": "Update rows in a Playlists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select from transcript": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Playlist Exists": {
      "main": [
        [
          {
            "node": "If Playlist exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Playlist Completed": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Select from transcript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Playlist Completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5b059196-d17b-4a3f-ade0-2faa621e3054",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "88e41dcf15121cd85765024a0c60a2aae1828244c370473348dcd1207fe07302"
  },
  "id": "MB7hpTRvuo1BqWml",
  "tags": []
}